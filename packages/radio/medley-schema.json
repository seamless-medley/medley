{
  "$schema": "https://json-schema.org/draft-07/schema",
  "title": "Medley",
  "description": "Configuration file for Medley",
  "type": "object",
  "properties": {
    "server": {
      "title": "Server",
      "description": "Web server configuration",
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65535
        },
        "address": {
          "$ref": "#/$defs/ipAddress"
        },
        "audioBitrate": {
          "title": "Bitrate",
          "description": "Bitrate for Opus, in kbps",
          "type": "integer",
          "minimum": 0,
          "maximum": 256
        }
      },
      "required": [],
      "additionalProperties": false
    },
    "webrtc": {
      "properties": {
        "listens": {
          "type": "array",
          "items": {
            "type": "object",
            "title": "Listen",
            "properties": {
              "protocol": {
                "title": "Network protocol",
                "oneOf": [
                  {
                    "type": "string",
                    "const": "tcp"
                  },
                  {
                    "type": "string",
                    "const": "udp"
                  }
                ]
              },
              "ip": {
                "title": "Listening IP",
                "$ref": "#/$defs/ipAddress"
              },
              "port": {
                "title": "Port",
                "type": "integer",
                "minimum": 1,
                "maximum": 65535
              },
              "announcedIp": {
                "title": "Useful when running behind NAT with private IP",
                "$ref": "#/$defs/ipAddress"
              }
            },
            "required": ["protocol", "ip", "port"],
            "additionalProperties": false
          }
        },
        "bitrate": {
          "title": "Bitrate",
          "description": "Bitrate for Opus, in kbps",
          "type": "integer",
          "minimum": 0,
          "maximum": 256
        }
      },
      "required": ["listens"],
      "additionalProperties": false
    },
    "db": {
      "$ref": "#/$defs/db"
    },
    "stations": {
      "title": "Stations",
      "description": "List of stations",
      "type": "object",
      "patternProperties": {
        "^.+$": {
          "$ref": "#/$defs/station"
        }
      }
    },
    "automatons": {
      "title": "Automaton",
      "description": "List of Discord bot",
      "type": "object",
      "patternProperties": {
        "^.+$": {
          "$ref": "#/$defs/automaton"
        }
      }
    },
    "streaming": {
      "title": "Streaming outputs",
      "description": "Specify list of streaming outputs",
      "type": "array",
      "items": {
        "$ref": "#/$defs/streaming_output"
      }
    }
  },
  "required": ["server", "db", "stations"],
  "additionalProperties": false,
  "$defs": {
    "db": {
      "oneOf": [
        {
          "type": "object",
          "description": "MongoDB options",
          "properties": {
            "driver": {
              "const": "mongodb"
            },
            "url": {
              "type": "string",
              "minLength": 1
            },
            "database": {
              "type": "string",
              "minLength": 1
            },
            "connectionOptions": {
              "type": "object",
              "markdownDescription": "See: [Driver Documentation](https://www.mongodb.com/docs/manual/reference/connection-string)"
            },
            "metadataTTL": {
              "description": "Time-To-Live for music metadata",
              "type": "object",
              "properties": {
                "min": {
                  "type": "integer",
                  "minimum": 0
                },
                "max": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          "required": ["driver", "url", "database"],
          "additionalProperties": false
        }
      ]
    },
    "station": {
      "title": "Station",
      "description": "Define a station",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Station name",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "Station description"
        },
        "url": {
          "type": "string",
          "description": "Station URL"
        },
        "iconURL": {
          "type": "string",
          "description": "Station URL for icon"
        },
        "maxTrackHistory": {
          "type": "integer",
          "description": "Number of tracks to keep in history",
          "minimum": 0,
          "default": 20
        },
        "artistBacklog": {
          "oneOf": [
            {
              "type": "boolean",
              "const": false,
              "description": "No artist duplication check"
            },
            {
              "type": "integer",
              "minimum": 0,
              "default": 50,
              "description": "Number of last tracks used to check for duplicated artists"
            }
          ]
        },
        "duplicationSimilarity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "A fraction from 0 to 1 which indicates the degree of similarity between the two artists"
        },
        "musicCollections": {
          "title": "Music Collections",
          "type": "object",
          "description": "Map of music collection",
          "patternProperties": {
            "^.+$": {
              "$ref": "#/$defs/musicCollection"
            }
          }
        },
        "profiles": {
          "title": "Station profiles",
          "type": "object",
          "description": "Map of station profile profile, at least the default profile must be defined",
          "patternProperties": {
            "^.+$": {
              "$ref": "#/$defs/stationProfile"
            }
          },
          "required": ["default"]
        }
      },
      "required": ["name", "description", "musicCollections", "profiles"],
      "additionalProperties": false
    },
    "automaton": {
      "title": "Automaton",
      "description": "Automaton (Bot)",
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "minLength": 1
        },
        "botToken": {
          "type": "string",
          "minLength": 1
        },
        "owners": {
          "type": "array",
          "title": "Owners",
          "description": "List of bot owner ID",
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        "stations": {
          "type": "array",
          "description": "List of station id to allow tuning from this automaton, or leave blank to allow all stations",
          "items": {
            "type": "string"
          }
        },
        "baseCommand": {
          "type": "string",
          "description": "Base command",
          "minLength": 1,
          "default": "medley"
        },
        "guilds": {
          "type": "object",
          "description": "Guild specific configurations",
          "patternProperties": {
            "^.+$": {
              "$ref": "#/$defs/guildConfig"
            }
          }
        }
      },
      "required": ["clientId", "botToken"],
      "additionalProperties": false
    },
    "musicCollection": {
      "title": "Music collection",
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "minItems": 1,
          "$ref": "#/$defs/dirPath"
        },
        "description": {
          "type": "string"
        },
        "auxiliary": {
          "type": "boolean",
          "description": "Mark this collection as an auxiliary\nAn auxiliary collection cannot be used in a playing sequence"
        },
        "noFollowOnRequest": {
          "type": "boolean",
          "description": "Disable crate following on a requested track",
          "default": false
        },
        "disableLatch": {
          "type": "boolean",
          "description": "Disable latching",
          "default": false
        },
        "newTracksAddingMode": {
          "type": "string",
          "description": "Specify how the new tracks should be added to the collection",
          "enum": ["prepend", "append", "spread"],
          "default": "spread"
        },
        "reshuffleEvery": {
          "type": "integer",
          "description": "Specify a number of tracks played from this collection that will trigger re-shuffling",
          "minimum": 0
        }
      },
      "required": ["paths", "description"],
      "additionalProperties": false
    },
    "sequence": {
      "title": "Play sequence",
      "type": "object",
      "properties": {
        "collections": {
          "type": "array",
          "description": "List of collection IDs and weights",
          "items": {
            "title": "Sequence collection",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "minLength": 1
              },
              "weight": {
                "type": "number"
              }
            },
            "required": ["id"],
            "additionalProperties": false
          }
        },
        "chance": {
          "title": "Sequence Chance",
          "description": "Chance of this collection being selected",
          "oneOf": [
            {
              "type": "string",
              "const": "random"
            },
            {
              "type": "object",
              "title": "Yes/No chance",
              "properties": {
                "yes": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "Chance of being selected"
                },
                "no": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "Chance of not being selected"
                }
              },
              "required": ["yes", "no"],
              "additionalProperties": false
            }
          ]
        },
        "limit": {
          "title": "Sequence play limit",
          "description": "Limit number of tracks to play after being selected",
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0
            },
            {
              "type": "string",
              "description": "Limit by the total number of tracks\nUsing this value will cause the entire collection to be played before switching to the next collection",
              "const": "entirely"
            },
            {
              "type": "object",
              "title": "Up to limit",
              "description": "Limit by the `upto` value",
              "properties": {
                "by": {
                  "type": "string",
                  "const": "upto"
                },
                "upto": {
                  "type": "integer",
                  "minimum": 0
                }
              },
              "required": ["by", "upto"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "title": "Range limit",
              "description": "Limit by the `range` value",
              "properties": {
                "by": {
                  "type": "string",
                  "const": "range"
                },
                "range": {
                  "type": "object",
                  "properties": {
                    "min": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "max": {
                      "type": "integer",
                      "minimum": 0
                    }
                  },
                  "required": ["min", "max"],
                  "additionalProperties": false
                }
              },
              "required": ["by", "range"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "title": "Sample limit",
              "description": "Limit by the `list` value",
              "properties": {
                "by": {
                  "type": "string",
                  "enum": ["sample", "one-of"]
                },
                "list": {
                  "description": "List of number of tracks\nA value from this list will be picked randomly",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 0
                  }
                }
              },
              "required": ["by", "list"],
              "additionalProperties": false
            }
          ]
        }
      },
      "required": ["collections", "limit"],
      "additionalProperties": false
    },
    "stationProfile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Profile name",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "Profile description"
        },
        "intros": {
          "title": "Intros",
          "description": "List of directories for picking up a file to play randomly before starting this profile",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        "sweeperRules": {
          "title": "Sweeper Rules",
          "description": "List of rules for inserting jingle track while transiting between music collections",
          "type": "array",
          "items": {
            "$ref": "#/$defs/sweeperRule"
          }
        },
        "requestSweepers": {
          "title": "Request Sweepers",
          "type": "array",
          "description": "List of directories for picking up a file to play randomly before transiting into a new request session",
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        "followCollectionAfterRequestTrack": {
          "type": "boolean",
          "description": "Whether to follow collection on a requested track",
          "default": true
        },
        "noRequestSweeperOnIdenticalCollection": {
          "type": "boolean",
          "description": "When enabled, a request sweeper will not be inserted\nif the consecutive tracks are from the same collection",
          "default": true
        },
        "sequences": {
          "title": "Sequences",
          "description": "List of crates containing rules for selecting music track to play",
          "type": "array",
          "items": {
            "$ref": "#/$defs/sequence"
          }
        }
      },
      "required": ["name", "sequences"]
    },
    "sweeperRule": {
      "title": "Sweeper Rule",
      "oneOf": [
        {
          "properties": {
            "from": {
              "$ref": "#/$defs/sweeperRuleFrom"
            },
            "path": {
              "$ref": "#/$defs/dirPath"
            }
          },
          "required": ["from", "path"],
          "not": {"required": ["to"]},
          "additionalProperties": false
        },
        {
          "properties": {
            "to": {
              "$ref": "#/$defs/sweeperRuleTo"
            },
            "path": {
              "$ref": "#/$defs/dirPath"
            }
          },
          "required": ["to", "path"],
          "not": {"required": ["from"]},
          "additionalProperties": false
        },
        {
          "properties": {
            "from": {
              "$ref": "#/$defs/sweeperRuleFrom"
            },
            "to": {
              "$ref": "#/$defs/sweeperRuleTo"
            },
            "path": {
              "$ref": "#/$defs/dirPath"
            }
          },
          "required": ["from", "to", "path"],
          "additionalProperties": false
        }
      ]
    },
    "sweeperRuleFrom": {
      "description": "List of collection id that this sweeper should be inserted while transiting from",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "sweeperRuleTo": {
      "description": "List of collection id that this sweeper should be inserted while transiting to",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "dirPath": {
      "type": "string",
      "description": "Path to a directory\nRecursively scan and watch for music files",
      "minLength": 1
    },
    "guildConfig": {
      "type": "object",
      "description": "Guild specific configuration",
      "properties": {
        "autotune": {
          "type": "string",
          "description": "Station id to initially tune-in",
          "minLength": 1
        },
        "autojoin": {
          "type": "string",
          "description": "Voice channel id to automatically join",
          "minLength": 1
        },
        "trackMessage": {
          "type": "object",
          "properties": {
            "type": {
              "default": "extended",
              "oneOf": [
                {
                  "type": "string",
                  "const": "normal"
                },
                {
                  "type": "string",
                  "const": "extended"
                },
                {
                  "type": "string",
                  "const": "simple"
                }
              ]
            },
            "max": {
              "type": "integer",
              "description": "Number of last messages to be kept in a guild",
              "minimum": 0
            },
            "channel": {
              "type": "string",
              "description": "Text channel id for sending track message",
              "minLength": 1
            },
            "retainOnReaction": {
              "type": "boolean",
              "description": "Keep the message if a reaction has been added to it"
            },
            "always": {
              "type": "boolean",
              "description": "Always received track messages even if there aren't any audiences"
            }
          },
          "additionalProperties": false
        },
        "bitrate": {
          "title": "Bitrate",
          "description": "Bitrate for Opus, in kbps",
          "type": "integer",
          "minimum": 0,
          "maximum": 256,
          "default": 256
        },
        "volume": {
          "title": "Volume",
          "markdownDescription": "Volume\n- 0 => 0%\n- 0.5 => 50%\n- 1.0 => 100%",
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1.0
        },
        "djRoles": {
          "title": "DJ Roles",
          "description": "List of role IDs for DJ",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        }
      },
      "additionalProperties": false
    },
    "ipAddress": {
      "oneOf": [
        {
          "type": "string",
          "description": "IPv4",
          "pattern": "^(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]{1,2})(\\.(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})){3}$"
        },
        {
          "type": "string",
          "description": "IPv6",
          "pattern": "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))"
        }
      ]
    },
    "streaming_output": {
      "oneOf": [
        { "$ref": "#/$defs/shout_output" },
        { "$ref": "#/$defs/icy_output" }
      ]
    },
    "shout_output": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "shout"
        },
        "station": {
          "type": "string",
          "minLength": 1
        },
        "icecast": {
          "type": "object",
          "title": "Icecast",
          "description": "Details of the Icecast server to connect to",
          "properties": {
            "host": {
              "type": "string",
              "minLength": 1
            },
            "port": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535
            },
            "mountpoint": {
              "type": "string",
              "pattern": "/.*"
            },
            "username": {
              "type": "string",
              "minLength": 1
            },
            "password": {
              "type": "string",
              "minLength": 1
            }
          },
          "required": ["host", "port", "mountpoint", "username", "password"],
          "additionalProperties": false
        },
        "format": {
          "type": "object",
          "required": ["codec"],
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "codec": {
                  "const": "flac"
                },
                "sampleRate": {
                  "type": "integer",
                  "title": "Bitrate",
                  "description": "Bitrate in Kbps",
                  "minimum": 8000,
                  "maximum": 192000
                }
              },
              "required": ["sampleRate"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "codec": {
                  "const": "mp3"
                },
                "bitrate": {
                  "type": "integer",
                  "title": "Bitrate",
                  "description": "Bitrate in Kbps",
                  "minimum": 80,
                  "maximum": 320
                },
                "sampleRate": {
                  "enum": [
                    8000, 11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000
                  ]
                }
              },
              "required": ["bitrate", "sampleRate"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "codec": {
                  "enum": ["aac", "he-aac"]
                },
                "bitrate": {
                  "type": "integer",
                  "title": "Bitrate",
                  "description": "Bitrate in Kbps",
                  "minimum": 16,
                  "maximum": 320
                },
                "sampleRate": {
                  "enum": [
                    11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000
                  ]
                }
              },
              "required": ["bitrate", "sampleRate"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "codec": {
                  "const": "vorbis"
                },
                "bitrate": {
                  "type": "integer",
                  "title": "Bitrate",
                  "description": "Bitrate in Kbps",
                  "minimum": 8,
                  "maximum": 320
                },
                "sampleRate": {
                  "enum": [
                    8000, 11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000
                  ]
                }
              },
              "required": ["bitrate", "sampleRate"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "codec": {
                  "const": "opus"
                },
                "bitrate": {
                  "type": "integer",
                  "title": "Bitrate",
                  "description": "Bitrate in Kbps",
                  "minimum": 8,
                  "maximum": 320
                },
                "sampleRate": {
                  "enum": [
                    8000, 12000, 16000, 24000, 44100, 48000
                  ]
                }
              },
              "required": ["bitrate", "sampleRate"],
              "additionalProperties": false
            }
          ]
        },
        "fx": {
          "$ref": "#/$defs/fx"
        }
      },
      "required": ["type", "station", "icecast", "format"],
      "additionalProperties": false
    },
    "icy_output": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "icy"
        },
        "station": {
          "type": "string",
          "minLength": 1
        },
        "mountpoint": {
          "type": "string",
          "pattern": "/.*"
        },
        "format": {
          "type": "object",
          "required": ["codec"],
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "codec": {
                  "const": "mp3"
                },
                "bitrate": {
                  "type": "integer",
                  "title": "Bitrate",
                  "description": "Bitrate in Kbps",
                  "minimum": 80,
                  "maximum": 320
                },
                "sampleRate": {
                  "enum": [
                    8000, 11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000
                  ]
                }
              },
              "required": ["bitrate", "sampleRate"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "codec": {
                  "const": "adts",
                  "description": "Audio Data Transport Stream (Raw AAC)"
                },
                "bitrate": {
                  "type": "integer",
                  "title": "Bitrate",
                  "description": "Bitrate in Kbps",
                  "minimum": 16,
                  "maximum": 320
                },
                "sampleRate": {
                  "enum": [
                    11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000
                  ]
                }
              },
              "required": ["bitrate", "sampleRate"],
              "additionalProperties": false
            }
          ]
        },
        "fx": {
          "$ref": "#/$defs/fx"
        }
      },
      "required": ["type",  "station", "format", "mountpoint"],
      "additionalProperties": false
    },
    "fx": {
      "type": "object",
      "properties": {
        "karaoke": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          }
        }
      }
    }
  }
}
